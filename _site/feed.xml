<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-05-13T16:04:45+08:00</updated><id>/</id><title type="html">ATERRO</title><subtitle>Though usually reliable,I may let one or two important things slip through my fingers for no apparent reason.</subtitle><entry><title type="html">解决Jekyll无法本地预览中文文件的问题</title><link href="/%E8%A7%A3%E5%86%B3Jekyll%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="解决Jekyll无法本地预览中文文件的问题" /><published>2017-05-13T00:00:00+08:00</published><updated>2017-05-13T00:00:00+08:00</updated><id>/解决Jekyll中文乱码问题</id><content type="html" xml:base="/%E8%A7%A3%E5%86%B3Jekyll%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/">&lt;p&gt;在使用Jekyll在本地预览自己写的博客无法正常打开，而提交到Github上却可以正常解析。看了一下发现是文件写的博客有什么变化，原来是因为博客的Markdown文件使用了中文文件名，Jekyll无法正常解析出现乱码。
　　&lt;/p&gt;

&lt;p&gt;解决方法：修改安装目录&lt;strong&gt;\ruby-2.3.3-x64-mingw32\lib\ruby\2.3.0\webrick\httpservlet\filehandler.rb&lt;/strong&gt;文件。&lt;/p&gt;

&lt;p&gt;找到下列两处，添加一句（+的一行为添加部分）&lt;/p&gt;

&lt;p&gt;1.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;path = req.path_info.dup.force_encoding(Encoding.find(&quot;filesystem&quot;))
+ path.force_encoding(&quot;UTF-8&quot;) # 加入编码
if trailing_pathsep?(req.path_info)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;break if base == &quot;/&quot;
+ base.force_encoding(&quot;UTF-8&quot;) #加入编码
break unless File.directory?(File.expand_path(res.filename + base))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改完重新jekyll serve即可支持中文文件名。&lt;/p&gt;</content><category term="jekyll" /><summary type="html">用Jekyll在本地预览自己写的博客无法正常打开，而提交到Github上却可以正常解析。</summary></entry><entry><title type="html">Spring Cloud分布式开发五大神兽</title><link href="/SpringCloud%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E4%BA%94%E5%A4%A7%E7%A5%9E%E5%85%BD/" rel="alternate" type="text/html" title="Spring Cloud分布式开发五大神兽" /><published>2016-01-16T00:00:00+08:00</published><updated>2016-01-16T00:00:00+08:00</updated><id>/SpringCloud分布式开发五大神兽</id><content type="html" xml:base="/SpringCloud%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E4%BA%94%E5%A4%A7%E7%A5%9E%E5%85%BD/">&lt;h1 id=&quot;spring-cloud分布式开发五大神兽&quot;&gt;Spring Cloud分布式开发五大神兽&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;服务发现——Netflix Eureka&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客服端负载均衡——Netflix Ribbon&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;断路器——Netflix Hystrix&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服务网关——Netflix Zuul&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分布式配置——Spring Cloud Config&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;eureka&quot;&gt;Eureka&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/medias/SpringCloud分布式开发五大神兽/29efcd4ec6dcc5c1249ef50115ef5599.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一个RESTful服务，用来定位运行在AWS地区（Region）中的中间层服务。由两个组件组成：Eureka服务器和Eureka客户端。Eureka服务器用作服务注册服务器。Eureka客户端是一个&lt;strong&gt;Java&lt;/strong&gt;客户端，用来简化与服务器的交互、作为轮询负载均衡器，并提供服务的故障切换支持。Netflix在其生产环境中使用的是另外的客户端，它提供基于流量、资源利用率以及出错状态的加权负载均衡。&lt;/p&gt;

&lt;h2 id=&quot;ribbon&quot;&gt;Ribbon&lt;/h2&gt;

&lt;p&gt;Ribbon，主要提供客户侧的软件负载均衡&lt;strong&gt;算法&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/medias/SpringCloud分布式开发五大神兽/5979736638bbec1fc7d9461e2fa6e802.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ribbon客户端组件提供一系列完善的配置选项，比如连接超时、重试、重试算法等。Ribbon内置可插拔、可定制的负载均衡组件。下面是用到的一些负载均衡策略：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;简单轮询负载均衡&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;加权响应时间负载均衡&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;区域感知轮询负载均衡&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;随机负载均衡&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ribbon中还包括以下功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;易于与服务发现组件（比如Netflix的Eureka）集成&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用Archaius完成运行时配置&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用JMX暴露运维指标，使用Servo发布&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多种可插拔的序列化选择&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异步和批处理操作（即将推出）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自动SLA框架（即将推出）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系统管理/指标控制台（即将推出）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hystrix&quot;&gt;Hystrix&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/medias/SpringCloud分布式开发五大神兽/36fcd2adc5a8767d6570132454e16a0d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;断路器可以防止一个应用程序多次试图执行一个操作，即很可能失败，允许它继续而不等待故障恢复或者浪费
CPU
周期，而它确定该故障是持久的。断路器模式也使应用程序能够检测故障是否已经解决。如果问题似乎已经得到纠正​​，应用程序可以尝试调用操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/medias/SpringCloud分布式开发五大神兽/2f5e4e46ca2807e7e89ec1c17b653bea.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;断路器增加了稳定性和灵活性，以一个系统，提供稳定性，而系统从故障中恢复，并尽量减少此故障的对性能的影响。它可以帮助快速地拒绝对一个操作，即很可能失败，而不是等待操作超时（或者不返回）的请求，以保持系统的响应时间。如果断路器提高每次改变状态的时间的事件，该信息可以被用来监测由断路器保护系统的部件的健康状况，或以提醒管理员当断路器跳闸，以在打开状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/medias/SpringCloud分布式开发五大神兽/f8cdef22d62a66899e3fc40f9bfa5ff2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;流程图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/medias/SpringCloud分布式开发五大神兽/76d1a3b82af1a2fd1a409c672135d294.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;zuul&quot;&gt;Zuul&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/medias/SpringCloud分布式开发五大神兽/387e6d0ea41595aacd0a8640d2bdfd40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;类似nginx，反向代理的功能，不过netflix自己增加了一些配合其他组件的特性。&lt;/p&gt;

&lt;h2 id=&quot;spring-cloud-config&quot;&gt;Spring Cloud Config&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/medias/SpringCloud分布式开发五大神兽/c16b794e1ed76390b466e25a6eec405b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个还是静态的，得配合Spring Cloud Bus实现动态的配置更新。&lt;/p&gt;</content><category term="spring cloud" /><summary type="html">服务发现、客户端负载均衡器、断路器、服务网关、分布式配置。</summary></entry></feed>
